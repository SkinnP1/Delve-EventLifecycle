version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: delve-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: delve_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - delve-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d delve_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: delve-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - delve-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: delve-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - delve-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-topics:
    image: confluentinc/cp-kafka:7.4.0
    container_name: delve-kafka-topics
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
      echo 'Creating delve-kafka-topic...'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic delve-kafka-topic --partitions 3 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic delve-kafka-topic-dlq --partitions 3 --replication-factor 1
      echo 'Topic created successfully!'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - delve-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: delve-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - delve-network

  app:
    build: .
    container_name: delve-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-topics:
        condition: service_completed_successfully
    environment:
      # Application Configuration
      - APP_NAME=Delve
      - APP_VERSION=1.0.0
      - APP_DESCRIPTION=A simple NestJS application called Delve
      - APP_PORT=3000
      - NODE_ENV=development
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_DATABASE=delve_db
      # API Configuration
      - API_PREFIX=api
      - API_VERSION=v1
      - API_TIMEOUT=30000
      - CORS_ORIGIN=*
      - RATE_LIMIT=100
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=combined
      - LOG_MAX_SIZE=10m
      - LOG_MAX_FILES=5
      # Kafka Configuration
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CLIENT_ID=delve-app
      - KAFKA_GROUP_ID=delve-group
      - KAFKA_TOPIC=delve-kafka-topic
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - KAFKA_SESSION_TIMEOUT=30000
      - KAFKA_HEARTBEAT_INTERVAL=3000
      - KAFKA_MAX_POLL_RECORDS=500
      - KAFKA_ENABLE_AUTO_COMMIT=true
      - KAFKA_RETRY_BACKOFF=100
      - KAFKA_RETRY_ATTEMPTS=3
      - KAFKA_SSL_ENABLED=false
      - KAFKA_SASL_MECHANISM=PLAIN
      - KAFKA_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CONSUMER_TIMEOUT=1000
      - KAFKA_PRODUCER_ACKS=all
      - KAFKA_PRODUCER_RETRIES=3
      - KAFKA_PRODUCER_BATCH_SIZE=16384
      - KAFKA_PRODUCER_LINGER_MS=5
      - KAFKA_PRODUCER_BUFFER_MEMORY=33554432
      - KAFKA_PRODUCER_COMPRESSION_TYPE=none
    ports:
      - "3000:3000"
    networks:
      - delve-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  delve-network:
    driver: bridge
